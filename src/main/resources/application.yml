server:
#  port: ${random.int[10000,19999]} # 随机端口，方便启动多个消费者
  port: 8081 # 随机端口，方便启动多个消费者
canal:
 server: 192.168.84.22:11111
 destination: example
spring:
#  data:
#    mongodb:
#      uri: mongodb://vip_order_dev:vip_order_dev123@dds-bp1c04e3663050841.mongodb.rds.aliyuncs.com:3717,dds-bp1c04e3663050842.mongodb.rds.aliyuncs.com:3717/vip_order_dev?replicaSet=mgset-23088505
  # Kafka 配置项，对应 KafkaProperties 配置类
#  kafka:
#    bootstrap-servers: 127.0.0.1:9092
#    consumer:
#      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
#      auto-commit-interval: 1S
#      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
#      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
#      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
#      auto-offset-reset: latest
#      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
#      enable-auto-commit: false
#      # 键的反序列化方式
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      # 值的反序列化方式
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      max-poll-records: 50
#      properties:
#        max:
#          poll:
#            interval:
#              ms: 60000000
#    listener:
#      # 在侦听器容器中运行的线程数。
#      concurrency: 1
#      #listner负责ack，每调用一次，就立即commit
#      ack-mode: manual_immediate
#      missing-topics-fatal: false

      # Kafka 配置项2
#  kafka:
#    bootstrap-servers: 127.0.0.1:9092
#    consumer:
#      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
#      auto-commit-interval: 1S
#      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
#      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
#      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
#      auto-offset-reset: latest
#      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
#      enable-auto-commit: false
#      # 键的反序列化方式
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      # 值的反序列化方式
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      max-poll-records: 50
#      properties:
#        max:
#          poll:
#            interval:
#              ms: 60000000
#    listener:
#      # 在侦听器容器中运行的线程数。
#      concurrency: 1
#      #listner负责ack，每调用一次，就立即commit
#      ack-mode: manual_immediate
#      missing-topics-fatal: false

  # spring cloud stream kafka 配置项
#  cloud:
#    stream:
#      default-binder: kafka           #如果还有rabbitmq的话需要制定一个默认的
#      kafka:
#        binder:
#          brokers: 127.0.0.1:9092     # kafka地址
#          zk-nodes: 127.0.0.1:2181    # zk地址 springboot2.0之后 可省略
#          auto-create-topics: true
#            # Kafka Binding 配置项，对应 KafkaBindingProperties 类
#        bindings:
#          input:
#          # Kafka Consumer 配置项，对应 KafkaConsumerProperties 类
#           consumer:
#            enable-dlq: true # 是否开启死信队列，默认为 false 关闭
#            dlq-name: stream-demo.group-1.errors # 死信队列名，默认为 `errors.{topicName}.{consumerGroup}`
#      bindings:
#        output:                       #默认output
#          destination: stream-demo    #消息发往的目的地
#          content-type: application/json    #消息发送格式
#        myOutput:                     #自定义output
#          destination: stream-demo    #消息发往的目的地
#          content-type: application/json  #消息发送格式
#          producer:
#            partitionKeyExpression: payload['id'] # 配置分区的输出绑定
#        input:                        #接收
#          destination: stream-demo
#          group: group-1
#          consumer:
#           max-attempts: 3 # 重试次数，默认为 3 次。
#           back-off-initial-interval: 3000 # 重试间隔的初始值，单位毫秒，默认为 1000
#           back-off-multiplier: 2.0 # 重试间隔的递乘系数，默认为 2.0
#           back-off-max-interval: 10000 # 重试间隔的最大值，单位毫秒，默认为 10000
#           enable-dlq: true # 是否开启死信队列，默认为 false 关闭
#           concurrency:  2 # 每个 Consumer 消费线程数的初始大小，默认为 1
#        input2:                        #接收
#          destination: stream-demo
#          group: group-2

  security:
   user:
     name: admin
     password: admin

  application:
    name: allTest
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/MyTest?useSSL=false
    username: root
    password: 1111
  redis:
   url: redis://127.0.0.1:6379
   host: 127.0.0.1
   port: 6379
   password:
   database: 0
   jedis:
     pool:
       max-active: 100        # 最大连接数量
       max-idle: 10           # 最大空闲数量
       min-idle: 10           # 最小空闲数量
       max-wait: 1000000000ms # 获取连接时的最大等待毫秒数
  #  rabbitmq:
#    host: localhost
#    port: 5672
#    username: guest
#    password: guest
#    virtual-host: /

  jpa:
    properties:
      hibernate:
        hbm2ddl:
          auto: update
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
        format_sql: true
    show-sql: true
logging:
 level:
  org.zhire.mapper: debug

xgx:
 tykMap:
  s1: 1234
  s2: 91250
  s3: 2365


